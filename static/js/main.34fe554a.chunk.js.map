{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","id","name","email","React","createElement","Fragment","className","src","concat","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","Component","constructor","super","onSearchChange","event","this","setState","searchField","target","value","state","componentDidMount","fetch","then","response","json","users","render","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","StrictMode"],"mappings":"sMAgBeA,MAdFC,IAA0B,IAAzB,GAAEC,EAAE,KAAEC,EAAI,MAAEC,GAAOH,EAC/B,OACEI,IAAAC,cAAAD,IAAAE,SAAA,KACAF,IAAAC,cAAA,OAAKE,UAAU,uDACbH,IAAAC,cAAA,OAAKG,IAAG,wBAAAC,OAA0BR,EAAE,YAAYS,IAAI,WACpDN,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAKH,GACLE,IAAAC,cAAA,SAAIF,OCWGQ,MAjBEX,IAAiB,IAAhB,OAAEY,GAAQZ,EAC1B,OACEI,IAAAC,cAAA,WACGO,EAAOC,IAAI,CAACC,EAAMC,IAEfX,IAAAC,cAACN,EAAI,CACHiB,IAAKD,EACLd,GAAIW,EAAOG,GAAGd,GACdC,KAAMU,EAAOG,GAAGb,KAChBC,MAAOS,EAAOG,GAAGZ,WCGdc,MAbGjB,IAAoC,IAAnC,YAAEkB,EAAW,aAAEC,GAAcnB,EAC9C,OACEI,IAAAC,cAAA,OAAKE,UAAU,OACbH,IAAAC,cAAA,SACEE,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCHI,MARCC,GAERpB,IAAAC,cAAA,OAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,U,MCCnB,MAAMC,UAAYC,YAChBC,cACEC,QAAO,KAaTC,eAAiBC,IACfC,KAAKC,SAAS,CAAEC,YAAaH,EAAMI,OAAOC,SAb1CJ,KAAKK,MAAQ,CACX7B,OAAQ,GACR0B,YAAa,IAIjBI,oBACEC,MAAM,8CACHC,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,GAASX,KAAKC,SAAS,CAAEzB,OAAQmC,KAO3CC,SACE,MAAM,OAAEpC,EAAM,YAAE0B,GAAgBF,KAAKK,MAC/BQ,EAAiBrC,EAAOsC,OAAOC,GAC5BA,EAAMjD,KAAKkD,cAAcC,SAASf,EAAYc,gBAGvD,OAAQxC,EAAO0C,OAGblD,IAAAC,cAAA,OAAKE,UAAU,MACbH,IAAAC,cAAA,MAAIE,UAAU,UAAS,eACvBH,IAAAC,cAACY,EAAS,CAACE,aAAciB,KAAKF,iBAC9B9B,IAAAC,cAACkB,EAAM,KACLnB,IAAAC,cAACM,EAAQ,CAACC,OAAQqC,MANtB7C,IAAAC,cAAA,UAAI,YAaKyB,QCjCAyB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,KAAK5C,IAAkD,IAAjD,OAAE0D,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAS9D,EACpE0D,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,M,MCADO,IAASC,WAAWC,SAASC,eAAe,SACpDlB,OACH5C,IAAAC,cAACD,IAAM+D,WAAU,KACf/D,IAAAC,cAACyB,EAAG,QAORyB,K","file":"static/js/main.34fe554a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <>\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll","import React, { Component } from 'react'\r\nimport CardList from '../Components/CardList'\r\nimport SearchBox from '../Components/SearchBox'\r\nimport Scroll from '../Components/Scroll'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n  constructor () {\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n      searchField: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ robots: users }))\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    this.setState({ searchField: event.target.value })\r\n  }\r\n\r\n  render () {\r\n    const { robots, searchField } = this.state\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n\r\n    return !robots.length ? (\r\n      <h1>Loading</h1>\r\n    ) : (\r\n      <div className='tc'>\r\n        <h1 className='f1 pa2'>RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport './index.css'\nimport App from './Containers/App'\nimport reportWebVitals from './reportWebVitals'\nimport 'tachyons'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'))\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}